-- 1. Create table
create table
  public.family (
    id bigint generated by default as identity,
    tree jsonb null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    constraint family_pkey primary key (id)
  ) tablespace pg_default;

create table
  public.roles (
    id bigint generated by default as identity,
    role character varying null,
    constraint role_pkey primary key (id)
  ) tablespace pg_default;

create table
  public.profile (
    id uuid not null,
    name text null,
    role_id integer null,
    father_id text not null default ''::text,
    mother_id character varying not null default ''::character varying,
    is_verify smallint not null default '1'::smallint,
    created_at timestamp with time zone not null default now(),
    constraint profile_pkey primary key (id),
    constraint profile_id_fkey foreign key (id) references auth.users (id) on delete cascade,
    constraint profile_role_id_fkey foreign key (role_id) references roles (id) on delete cascade
  ) tablespace pg_default;

create table
  public.temporary_family (
    id bigint generated by default as identity,
    parent_id character varying not null,
    parent_name character varying not null,
    relation_type character varying not null,
    data jsonb not null,
    status bigint not null,
    created_at timestamp with time zone not null default now(),
    constraint temporary_family_pkey primary key (id)
  ) tablespace pg_default;

-- 2. Enable RLS
alter table family enable row level security;

alter table roles enable row level security;

alter table profile enable row level security;

alter table temporary_family enable row level security;

-- 3. Create Policy
create policy "Enable read access for all users" on public.family for
select
  using (true);

create policy "Enable insert for authenticated users only" on public.family for insert to authenticated
with
  check (true);

create policy "Enable update for authenticated users only" on public.family
for update
  using (true)
with
  check (true);

create policy "Enable read access for all users" on public.profile for
select
  using (true);

create policy "Enable insert for authenticated users only" on public.profile for insert to authenticated
with
  check (true);

create policy "Enable update for authenticated users only" on public.profile
for update
  using (true)
with
  check (true);

create policy "Enable read access for all users" on public.temporary_family for
select
  using (true);

create policy "Enable insert for authenticated users only" on public.temporary_family for insert to authenticated
with
  check (true);

create policy "Enable update for authenticated users only" on public.temporary_family
for update
  using (true)
with
  check (true);

-- 4. Create Bucket Storage
insert into
  storage.buckets (id, name, public)
values
  ('family', 'family', true);

create policy "storaget_policy_public" on storage.objects for
select
  using (true);

create policy "storage_policy_insert" on storage.objects for insert to authenticated
with
  check (true);

-- 5. Insert Base Data
insert into
  public.roles (id, role)
values
  (1, 'superadmin'),
  (2, 'member');